FROM ubuntu:24.04

ENV DEBIAN_FRONTEND=noninteractive
ENV HELPER_SCRIPTS=/imagegeneration/helpers
ENV INSTALLER_SCRIPT_FOLDER=/imagegeneration/installers
ENV IMAGE_VERSION=dev
ENV IMAGE_OS=ubuntu24
ENV IMAGE_FOLDER=/imagegeneration

# Create necessary directories
RUN mkdir -p ${IMAGE_FOLDER} \
    && chmod 777 ${IMAGE_FOLDER}

# Copy helper and installation scripts
COPY images/ubuntu/scripts/helpers ${HELPER_SCRIPTS}/
COPY images/ubuntu/scripts/build ${INSTALLER_SCRIPT_FOLDER}/
COPY images/ubuntu/assets/post-gen ${IMAGE_FOLDER}/post-gen/
COPY images/ubuntu/scripts/tests ${IMAGE_FOLDER}/tests/
COPY images/ubuntu/scripts/docs-gen ${IMAGE_FOLDER}/docs-gen/
COPY helpers/software-report-base ${IMAGE_FOLDER}/docs-gen/
COPY images/ubuntu/toolsets/toolset-2404.json ${INSTALLER_SCRIPT_FOLDER}/toolset.json

# ---------------------------------- START: CUSTOM ----------------------------------
RUN apt-get update -y \
    && apt-get install -y software-properties-common \
    && add-apt-repository -y ppa:git-core/ppa \
    && apt-get update -y \
    && apt-get install -y --no-install-recommends \
    systemd \
    systemd-sysv \
    libsystemd0 \
    ca-certificates \
    dbus \
    iptables \
    iproute2 \
    kmod \
    locales \
    sudo \
    curl \
    git \
    vim \
    nano \
    ssh \
    build-essential \
    htop \
    dnsutils \
    net-tools \
    less \
    wget \
    zip \
    unzip \
    udev \
    jq

RUN mkdir -p /etc/cloud/templates/

ENV AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache

## issue not fixed upstream https://github.com/actions/runner-images/issues/11028
## there's no netcat in 24.04 but the script tries to install that
## currently, github action vms have netcat kinda by luck
## 22.04 curr has the openbsd version, so manually overriding that one
RUN jq '.apt.cmd_packages |= map(if . == "netcat" then "netcat-openbsd" else . end)' ${INSTALLER_SCRIPT_FOLDER}/toolset.json > ${INSTALLER_SCRIPT_FOLDER}/toolset_tmp.json \
    && mv ${INSTALLER_SCRIPT_FOLDER}/toolset_tmp.json ${INSTALLER_SCRIPT_FOLDER}/toolset.json
## fix tests 
RUN sed -i '19a \            "netcat-openbsd"    { $toolName = "netcat"; break }  # if this test fails, grep for `netcat-openbsd` to find the rationale in this dockerfile ' "${IMAGE_FOLDER}/tests/Apt.Tests.ps1"
# ---------------------------------- END: CUSTOM ---------------------------------- 

# Configure initial setup
RUN bash ${INSTALLER_SCRIPT_FOLDER}/configure-apt-mock.sh \
    && bash ${INSTALLER_SCRIPT_FOLDER}/install-ms-repos.sh \
    && bash ${INSTALLER_SCRIPT_FOLDER}/configure-apt-sources.sh \
    && bash ${INSTALLER_SCRIPT_FOLDER}/configure-apt.sh \
    && bash ${INSTALLER_SCRIPT_FOLDER}/configure-limits.sh

# Move directories
RUN mv ${IMAGE_FOLDER}/docs-gen ${IMAGE_FOLDER}/SoftwareReport && \
    mv ${IMAGE_FOLDER}/post-gen ${IMAGE_FOLDER}/post-generation && \

    # Configure environment
    bash ${INSTALLER_SCRIPT_FOLDER}/configure-environment.sh && \

    # Install core packages
    bash ${INSTALLER_SCRIPT_FOLDER}/install-apt-vital.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-powershell.sh && \

    # Install PowerShell modules
    pwsh -f ${INSTALLER_SCRIPT_FOLDER}/Install-PowerShellModules.ps1 && \
    pwsh -f ${INSTALLER_SCRIPT_FOLDER}/Install-PowerShellAzModules.ps1

## docker daemon won't/can't be running, hence we can't pull images - used in install-docker.sh
ENV DOCKERHUB_PULL_IMAGES=no
## needed for install-pipx-packages.sh
ENV PATH="$PATH:/opt/pipx_bin:/root/.local/bin"
## needed for install-homebrew.sh
ENV NONINTERACTIVE=1

# Install all tools
RUN bash ${INSTALLER_SCRIPT_FOLDER}/install-apt-common.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-microsoft-edge.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-firefox.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-git.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-git-lfs.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-github-cli.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-google-chrome.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-nvm.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-nodejs.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-php.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-selenium.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/configure-dpkg.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-yq.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-zstd.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/install-docker.sh && \

    # Configure toolset to only keep the python and pypy sections and drop everything else
    jq '.toolcache = [.toolcache[] | select(.name == "node")]' "${INSTALLER_SCRIPT_FOLDER}/toolset.json" > "${INSTALLER_SCRIPT_FOLDER}/toolset.json.tmp" && \
    mv "${INSTALLER_SCRIPT_FOLDER}/toolset.json.tmp" "${INSTALLER_SCRIPT_FOLDER}/toolset.json" && \
    pwsh -f ${INSTALLER_SCRIPT_FOLDER}/Install-Toolset.ps1 && \
    pwsh -f ${INSTALLER_SCRIPT_FOLDER}/Configure-Toolset.ps1 && \

    # Install additional packages
    bash ${INSTALLER_SCRIPT_FOLDER}/install-homebrew.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/configure-snap.sh && \ 

    # Cleanup and system configuration
    bash ${INSTALLER_SCRIPT_FOLDER}/cleanup.sh && \
    bash ${INSTALLER_SCRIPT_FOLDER}/configure-system.sh && \

    # Final cleanup
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Generate reports
# RUN pwsh -File ${IMAGE_FOLDER}/SoftwareReport/Generate-SoftwareReport.ps1 -OutputDirectory ${IMAGE_FOLDER} \
#     && pwsh -File ${IMAGE_FOLDER}/tests/RunAll-Tests.ps1 -OutputDirectory ${IMAGE_FOLDER}
